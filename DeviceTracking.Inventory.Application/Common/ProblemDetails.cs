using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace DeviceTracking.Inventory.Application.Common;

/// <summary>
/// RFC 9457 Problem Details for HTTP APIs
/// </summary>
public class ProblemDetails
{
    /// <summary>
    /// A URI reference that identifies the problem type
    /// </summary>
    [JsonPropertyName("type")]
    public string? Type { get; set; }

    /// <summary>
    /// A short, human-readable summary of the problem type
    /// </summary>
    [JsonPropertyName("title")]
    public string? Title { get; set; }

    /// <summary>
    /// The HTTP status code generated by the origin server for this occurrence of the problem
    /// </summary>
    [JsonPropertyName("status")]
    public int? Status { get; set; }

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem
    /// </summary>
    [JsonPropertyName("detail")]
    public string? Detail { get; set; }

    /// <summary>
    /// A URI reference that identifies the specific occurrence of the problem
    /// </summary>
    [JsonPropertyName("instance")]
    public string? Instance { get; set; }

    /// <summary>
    /// Additional details about the problem
    /// </summary>
    [JsonExtensionData]
    public Dictionary<string, object>? Extensions { get; set; }

    /// <summary>
    /// Creates a ProblemDetails instance from a BusinessException
    /// </summary>
    public static ProblemDetails FromBusinessException(BusinessException exception, string? instance = null)
    {
        return new ProblemDetails
        {
            Type = GetProblemTypeUri(exception.ErrorCode),
            Title = GetProblemTitle(exception.ErrorCode),
            Status = exception.StatusCode,
            Detail = exception.Message,
            Instance = instance,
            Extensions = exception.Details != null ? new Dictionary<string, object>
            {
                ["errorCode"] = exception.ErrorCode,
                ["details"] = exception.Details
            } : new Dictionary<string, object>
            {
                ["errorCode"] = exception.ErrorCode
            }
        };
    }

    /// <summary>
    /// Creates a ProblemDetails instance for validation errors
    /// </summary>
    public static ProblemDetails FromValidationException(ValidationException exception, string? instance = null)
    {
        var extensions = new Dictionary<string, object>
        {
            ["errorCode"] = exception.ErrorCode,
            ["validationErrors"] = exception.ValidationErrors
        };

        return new ProblemDetails
        {
            Type = GetProblemTypeUri(exception.ErrorCode),
            Title = GetProblemTitle(exception.ErrorCode),
            Status = exception.StatusCode,
            Detail = exception.Message,
            Instance = instance,
            Extensions = extensions
        };
    }

    /// <summary>
    /// Creates a ProblemDetails instance for generic exceptions
    /// </summary>
    public static ProblemDetails FromException(Exception exception, int statusCode = 500, string? instance = null)
    {
        return new ProblemDetails
        {
            Type = GetProblemTypeUri("INTERNAL_ERROR"),
            Title = GetProblemTitle("INTERNAL_ERROR"),
            Status = statusCode,
            Detail = statusCode == 500 ? "An internal server error occurred" : exception.Message,
            Instance = instance,
            Extensions = new Dictionary<string, object>
            {
                ["errorCode"] = "INTERNAL_ERROR",
                ["exceptionType"] = exception.GetType().Name
            }
        };
    }

    /// <summary>
    /// Creates a ProblemDetails instance for not found errors
    /// </summary>
    public static ProblemDetails NotFound(string resourceType, object resourceId, string? instance = null)
    {
        return new ProblemDetails
        {
            Type = GetProblemTypeUri("RESOURCE_NOT_FOUND"),
            Title = GetProblemTitle("RESOURCE_NOT_FOUND"),
            Status = 404,
            Detail = $"{resourceType} with ID '{resourceId}' not found",
            Instance = instance,
            Extensions = new Dictionary<string, object>
            {
                ["errorCode"] = "RESOURCE_NOT_FOUND",
                ["resourceType"] = resourceType,
                ["resourceId"] = resourceId
            }
        };
    }

    /// <summary>
    /// Creates a ProblemDetails instance for unauthorized access
    /// </summary>
    public static ProblemDetails Unauthorized(string? detail = null, string? instance = null)
    {
        return new ProblemDetails
        {
            Type = GetProblemTypeUri("UNAUTHORIZED"),
            Title = GetProblemTitle("UNAUTHORIZED"),
            Status = 401,
            Detail = detail ?? "Authentication is required to access this resource",
            Instance = instance,
            Extensions = new Dictionary<string, object>
            {
                ["errorCode"] = "UNAUTHORIZED"
            }
        };
    }

    /// <summary>
    /// Creates a ProblemDetails instance for forbidden access
    /// </summary>
    public static ProblemDetails Forbidden(string? detail = null, string? instance = null)
    {
        return new ProblemDetails
        {
            Type = GetProblemTypeUri("FORBIDDEN"),
            Title = GetProblemTitle("FORBIDDEN"),
            Status = 403,
            Detail = detail ?? "You do not have permission to access this resource",
            Instance = instance,
            Extensions = new Dictionary<string, object>
            {
                ["errorCode"] = "FORBIDDEN"
            }
        };
    }

    /// <summary>
    /// Creates a ProblemDetails instance for rate limiting
    /// </summary>
    public static ProblemDetails RateLimitExceeded(int limit, TimeSpan window, string? instance = null)
    {
        return new ProblemDetails
        {
            Type = GetProblemTypeUri("RATE_LIMIT_EXCEEDED"),
            Title = GetProblemTitle("RATE_LIMIT_EXCEEDED"),
            Status = 429,
            Detail = $"Rate limit exceeded. Maximum {limit} requests per {window.TotalMinutes} minutes",
            Instance = instance,
            Extensions = new Dictionary<string, object>
            {
                ["errorCode"] = "RATE_LIMIT_EXCEEDED",
                ["limit"] = limit,
                ["windowMinutes"] = window.TotalMinutes,
                ["retryAfter"] = window.TotalSeconds
            }
        };
    }

    /// <summary>
    /// Gets the problem type URI for an error code
    /// </summary>
    private static string GetProblemTypeUri(string errorCode)
    {
        return $"https://api.devicetracking.com/errors/{errorCode.ToLower()}";
    }

    /// <summary>
    /// Gets the problem title for an error code
    /// </summary>
    private static string GetProblemTitle(string errorCode)
    {
        return errorCode switch
        {
            "VALIDATION_ERROR" => "Validation Error",
            "RESOURCE_NOT_FOUND" => "Resource Not Found",
            "UNAUTHORIZED" => "Unauthorized",
            "FORBIDDEN" => "Forbidden",
            "CONFLICT" => "Conflict",
            "BUSINESS_RULE_VIOLATION" => "Business Rule Violation",
            "EXTERNAL_SERVICE_ERROR" => "External Service Error",
            "CONCURRENCY_CONFLICT" => "Concurrency Conflict",
            "RATE_LIMIT_EXCEEDED" => "Rate Limit Exceeded",
            "INTERNAL_ERROR" => "Internal Server Error",
            _ => "Error"
        };
    }
}

/// <summary>
/// Extension methods for ProblemDetails
/// </summary>
public static class ProblemDetailsExtensions
{
    /// <summary>
    /// Converts a ServiceResult to ProblemDetails
    /// </summary>
    public static ProblemDetails ToProblemDetails(this ServiceResult result, int statusCode = 400, string? instance = null)
    {
        if (result.IsSuccess)
        {
            throw new InvalidOperationException("Cannot convert successful result to problem details");
        }

        return new ProblemDetails
        {
            Type = ProblemDetails.GetProblemTypeUri("BUSINESS_ERROR"),
            Title = "Business Error",
            Status = statusCode,
            Detail = result.Error,
            Instance = instance,
            Extensions = new Dictionary<string, object>
            {
                ["errorCode"] = "BUSINESS_ERROR"
            }
        };
    }

    /// <summary>
    /// Converts a ServiceResult<T> to ProblemDetails
    /// </summary>
    public static ProblemDetails ToProblemDetails<T>(this ServiceResult<T> result, int statusCode = 400, string? instance = null)
    {
        if (result.IsSuccess)
        {
            throw new InvalidOperationException("Cannot convert successful result to problem details");
        }

        return new ProblemDetails
        {
            Type = ProblemDetails.GetProblemTypeUri("BUSINESS_ERROR"),
            Title = "Business Error",
            Status = statusCode,
            Detail = result.Error,
            Instance = instance,
            Extensions = new Dictionary<string, object>
            {
                ["errorCode"] = "BUSINESS_ERROR"
            }
        };
    }
}
