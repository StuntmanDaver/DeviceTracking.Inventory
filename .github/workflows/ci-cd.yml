name: CI/CD Pipeline for Device Tracking Inventory System

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'DeviceTracking.Inventory.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # Build and Test Job
  build-and-test:
    name: 'Build & Test'
    runs-on: windows-latest

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Display .NET Version'
      run: dotnet --version

    - name: 'Restore NuGet Packages'
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: 'Check Code Formatting'
      run: |
        dotnet format --verify-no-changes ${{ env.SOLUTION_FILE }} || (
          echo "Code formatting issues found. Run 'dotnet format' to fix."
          dotnet format ${{ env.SOLUTION_FILE }}
          echo "Formatted code. Please commit the changes."
          exit 1
        )

    - name: 'Build Solution'
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: 'Run Unit Tests'
      run: dotnet test ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --results-directory ./test-results

    - name: 'Upload Test Results'
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./test-results/

    - name: 'Upload Coverage Reports'
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./test-results/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella

    - name: 'Publish API'
      run: dotnet publish DeviceTracking.Inventory.Api/DeviceTracking.Inventory.Api.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output ./publish/api

    - name: 'Publish Web Dashboard'
      run: dotnet publish DeviceTracking.Inventory.Web/DeviceTracking.Inventory.Web.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output ./publish/web

    - name: 'Publish WinForms Application'
      run: dotnet publish DeviceTracking.Inventory.WinForms/DeviceTracking.Inventory.WinForms.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output ./publish/winforms --runtime win-x64 --self-contained false

    - name: 'Upload Build Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ./publish/
        retention-days: 30

  # Security Scanning Job
  security-scan:
    name: 'Security Scan'
    runs-on: windows-latest
    needs: build-and-test

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Run Security Code Analysis'
      uses: github/super-linter/slim@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_CSHARP: true
        VALIDATE_XML: true
        VALIDATE_JSON: true
        VALIDATE_YAML: true

    - name: 'Dependency Check'
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'DeviceTracking.Inventory'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --nvdValidForHours 24

    - name: 'Upload Dependency Check Results'
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  # Code Quality Analysis
  code-quality:
    name: 'Code Quality'
    runs-on: windows-latest
    needs: build-and-test

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Install SonarScanner'
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-coverage

    - name: 'Run SonarScanner Begin'
      run: |
        dotnet sonarscanner begin /k:"DeviceTracking_Inventory" /o:"your-org" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.vscoveragexml.reportsPaths="**/coverage.xml"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'Build with Coverage'
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }}

    - name: 'Run Tests with Coverage'
      run: dotnet test ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: 'Run SonarScanner End'
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  # Docker Build (for main branch only)
  docker-build:
    name: 'Docker Build'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3

    - name: 'Log in to Container Registry'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 'Build and Push API Docker Image'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/api.Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/api:latest
          ghcr.io/${{ github.repository }}/api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 'Build and Push Web Docker Image'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/web.Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/web:latest
          ghcr.io/${{ github.repository }}/web:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Development (for develop branch)
  deploy-dev:
    name: 'Deploy to Development'
    runs-on: windows-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
    - name: 'Download Build Artifacts'
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./artifacts

    - name: 'Deploy API to Development'
      run: |
        # Deployment commands for development environment
        echo "Deploying API to development environment"
        # Add your deployment commands here

    - name: 'Deploy Web to Development'
      run: |
        # Deployment commands for development environment
        echo "Deploying Web to development environment"
        # Add your deployment commands here

    - name: 'Health Check'
      run: |
        # Health check commands
        echo "Performing health checks"
        # Add health check commands here

  # Deploy to Production (for main branch with manual approval)
  deploy-prod:
    name: 'Deploy to Production'
    runs-on: windows-latest
    needs: [build-and-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: 'Download Build Artifacts'
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./artifacts

    - name: 'Deploy API to Production'
      run: |
        # Production deployment commands
        echo "Deploying API to production environment"
        # Add your production deployment commands here

    - name: 'Deploy Web to Production'
      run: |
        # Production deployment commands
        echo "Deploying Web to production environment"
        # Add your production deployment commands here

    - name: 'Run Smoke Tests'
      run: |
        # Smoke test commands
        echo "Running smoke tests"
        # Add smoke test commands here

    - name: 'Notify Stakeholders'
      run: |
        # Notification commands
        echo "Sending deployment notification"
        # Add notification commands here

  # Release Management
  release:
    name: 'Create Release'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release')

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Download Build Artifacts'
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./artifacts

    - name: 'Create GitHub Release'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          ## Changes
          ${{ github.event.head_commit.message }}

          ## Artifacts
          - API Application
          - Web Dashboard
          - WinForms Desktop Application
        draft: false
        prerelease: false

    - name: 'Upload Release Assets'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/api/DeviceTracking.Inventory.Api.dll
        asset_name: DeviceTracking.Inventory.Api.dll
        asset_content_type: application/octet-stream
